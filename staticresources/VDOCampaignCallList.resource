/***************************
****************************
DO NOT EDIT THIS FILE DIRECTLY - IT IS AUTO-GENERATED!
Instead edit the JS files in the javascript directory:

****************************
****************************/

(function(){
  var fileNsPrefix = (function() {
    'use strict';
    var scripts = document.getElementsByTagName('script');
    var lastScript = scripts[scripts.length - 1];
    var scriptName = lastScript.src;
    var parts = scriptName.split('/');
    var thisScript = parts[parts.length - 1];
    if (thisScript === "") {
      thisScript = parts[parts.length - 2];
    }
    var lowerCasePrefix = thisScript.indexOf('__') == -1 ? '' : thisScript.substring(0, thisScript.indexOf('__') + 2);
    //check for the cached namespace first
    lowerCasePrefix = lowerCasePrefix === '' && localStorage.getItem('nsPrefix') ? localStorage.getItem('nsPrefix'): lowerCasePrefix;
    
    if(lowerCasePrefix !== ''){
        lowerCasePrefix = /__$/.test(lowerCasePrefix) ? lowerCasePrefix : lowerCasePrefix + '__';
    }
    if (lowerCasePrefix.length === 0) {
      return function() {
        //then check if the app has put a namespace and take that one as it is newer
        lowerCasePrefix = window.nsPrefix ? window.nsPrefix: lowerCasePrefix;
        //add the underscore if it doesn't have them    
        if(lowerCasePrefix !== ""){
            lowerCasePrefix = /__$/.test(lowerCasePrefix) ? lowerCasePrefix : lowerCasePrefix + '__';
        }  
        return lowerCasePrefix;
      };
    } else {
      var resolvedNs = null;
      return function() {
        if (resolvedNs) {
          return resolvedNs;
        }
        // hack to make scan SF objects for the correct case
        try {
          var tofind = lowerCasePrefix.replace('__', '');
          var name;
          var scanObjectForNs = function(object, alreadySeen) {
            if (object && object !== window && alreadySeen.indexOf(object) == -1) {
                alreadySeen.push(object);
                Object.keys(object).forEach(function(key) {
                  if (key === 'ns') {
                    // do ns test
                    if (typeof object[key] === 'string' && object[key].toLowerCase() === tofind) {
                      name = object[key] + '__';
                      return false;
                    }
                  }
                  if (Object.prototype.toString.call(object[key]) === '[object Array]') {
                    object[key].forEach(function(value) {
                      var result = scanObjectForNs(value, alreadySeen);
                      if (result) {
                          name = result;
                          return false;
                      }
                    });
                  } else if (typeof object[key] == 'object') {
                    var result = scanObjectForNs(object[key], alreadySeen);
                    if (result) {
                        name = result;
                        return false;
                    }
                  }
                  if (name) {
                    return false;
                  }
                });
                if (name) {
                  return name;
                }
            };
          }
          if(typeof Visualforce !== 'undefined') { //inside VF
            scanObjectForNs(Visualforce.remoting.Manager.providers, []);  
          } else {
            return lowerCasePrefix;
          }
          if (name) {
            return resolvedNs = name;
          } else {
            return resolvedNs = lowerCasePrefix;
          }
        } catch (e) {
          return lowerCasePrefix;
        }
      };
    }
  })();

  var fileNsPrefixDot = function() {
    var prefix = fileNsPrefix();
    if (prefix.length > 1) {
      return prefix.replace('__', '.');
    } else {
      return prefix;
    }
};
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
angular.module('campaignCallList',
    ['vlocity', 'CardFramework', 'sldsangular', 'viaDirectives', 'ngAnimate', 'forceng', 'tmh.dynamicLocale', 'cfp.hotkeys', 'mgcrea.ngStrap', 'ngSanitize'])
.config(['remoteActionsProvider', function(remoteActionsProvider) {
    'use strict';
    remoteActionsProvider.setRemoteActions(window.remoteActions || {});
}]).config(function($locationProvider) {
        'use strict';
        $locationProvider.html5Mode({
            enabled: false,
            requireBase: false
        });

    }).config(['$compileProvider', function($compileProvider) {
        'use strict';
        $compileProvider.debugInfoEnabled(false);

    }]).config(['$localizableProvider', function($localizableProvider) {
        'use strict';
        $localizableProvider.setLocalizedMap(window.i18n);
        $localizableProvider.setDebugMode(window.ns === '');

    }]).config(['$datepickerProvider', function($datepickerProvider) {
        'use strict';
        angular.extend($datepickerProvider.defaults, {
            templateUrl: 'SldsDatepicker.tpl.html',
            dateFormat: 'M/d/yyyy',
            modelDateFormat: 'yyyy-MM-dd',
            dateType: 'string',
            autoclose: true,
            onHide: function() {

            }
        });
    }]).config(['$timepickerProvider', function($timepickerProvider) {
        'use strict';
        angular.extend($timepickerProvider.defaults, {
            templateUrl: 'SldsTimepicker.tpl.html',
            timeFormat: 'h:mm:ss a',
            placement: 'bottom-right',
            length: 7,
            autoclose: true
        });
    }]).config(['$tooltipProvider', function($tooltipProvider) {
        'use strict';
        angular.extend($tooltipProvider.defaults, {
            templateUrl: 'SldsTooltip.tpl.html',
            placement: 'auto top-left'
        });
    }]).run(['$rootScope', function($rootScope) {
        'use strict';
        $rootScope.nsPrefix = fileNsPrefix();
        // Used in templates for slds assets
        $rootScope.staticResourceURL = vlocCPQ.staticResourceURL;
        $rootScope.rightColumn = {
            toggleRightClass: 'toggle-right-expanded',
            largeBPWidth: '6',
            toggleIcon: 'richtextindent'
        };
        $rootScope.memberStatus = {};
        $rootScope.currentStoryId = '';
        $rootScope.membersAggInfoByCampaign = undefined;
        $rootScope.log = function(string, obj, color, fontSize) {
            string = '%c' + string;
            obj = obj || null;
            color = color || 'orange';
            fontSize = fontSize || '14px';
            console.log(string, 'color: ' + color + '; font-size: ' + fontSize + ';', obj);
        };

    }]).filter('sldsStaticResourceURL', ['$rootScope', function($rootScope) {
        'use strict';
        return function(sldsURL) {
            // staticResourceURL.slds = /resource/1459186855000/<namespace>__slds
            // sldsURL = /assets/icons/standard-sprite/svg/symbols.svg#opportunity
            return $rootScope.staticResourceURL.slds + sldsURL;
        };
    }]);

// Services
require('./modules/campaignCallList/services/CampaignAggInfo.js');

// Factories
require('./modules/campaignCallList/factory/CampaignService.js');

// Controllers
require('./modules/campaignCallList/controller/CampaignCallListController.js');
require('./modules/campaignCallList/controller/CampaignMemberController.js');
require('./modules/campaignCallList/controller/CampaignMemberStoriesController.js');
require('./modules/campaignCallList/controller/CampaignDetailsController.js');
require('./modules/campaignCallList/controller/CampaignAddMemberController.js');

// Directives

// Templates
require('./modules/campaignCallList/templates/templates.js');

},{"./modules/campaignCallList/controller/CampaignAddMemberController.js":2,"./modules/campaignCallList/controller/CampaignCallListController.js":3,"./modules/campaignCallList/controller/CampaignDetailsController.js":4,"./modules/campaignCallList/controller/CampaignMemberController.js":5,"./modules/campaignCallList/controller/CampaignMemberStoriesController.js":6,"./modules/campaignCallList/factory/CampaignService.js":7,"./modules/campaignCallList/services/CampaignAggInfo.js":8,"./modules/campaignCallList/templates/templates.js":9}],2:[function(require,module,exports){
angular.module('campaignCallList').controller('CampaignAddMemberController', function(
    $scope, $sce, remoteActions, $rootScope, CampaignService) {
    'use strict';
    $scope.importType = '';
    $scope.import_contacts = false;
    $scope.import_leads = false;
    $scope.selectedMembers = {
        'contactIds': [],
        'leadIds': []
    };
    $scope.importMembers = [];
    $scope.campaignMembers = [];
    if (window.campaignMembers !== undefined) {
        $scope.campaignMembers = JSON.parse(window.campaignMembers);
    }
    $scope.obj = {};
    $scope.filters = [];
    $scope.getRecordsAction = {};
    $scope.pageSize = 10;
    $scope.currentPage = 1;
    $scope.membersObj = {};
    $scope.getRecordsAction = {};
    $scope.show_filter = false;
    $scope.attributes = {};
    $scope.nextPageAction = {};
    $scope.prevPageAction = {};
    $scope.addCampaignMembersAction = {};
    $scope.select_all = false;
    $scope.campaignId = '';
    $scope.showBanner = false;
    $scope.showErrorBanner = false;
    $scope.memberType = '';
    $scope.show_company = false;
    $scope.bannerText = '';

    //Set Filters & Categories on init
    $scope.setObj = function(obj, campaignId) {
        var categories = {};
        $scope.campaignId = campaignId;
        $scope.obj = obj;
        $scope.getRecordsAction = obj.result.actions.getRecordsAction;
        $scope.filters = obj.result.records[0].filters.records;
        categories = obj.result.records[0].categories.records;
        categories = $scope.sortByKey(categories, 'displaySequence');
        for (var i = 0; i < categories.length; i++) {
            if (categories[i].uiControlType === '1-5 scale') {
                for (var j = 0; j < categories[i].attributes.records.length; j++) {
                    categories[i].attributes.records[j].minvalue = 1;
                    categories[i].attributes.records[j].maxvalue = 5;
                }
            }
        }
        var message = {
            event: 'reload',
            message: [categories]
        };
        $rootScope.$broadcast('vlocity.layout.campaign-member-filter.events', message);
    };

    //Sorts array of objects by key
    $scope.sortByKey = function(array, key) {
        return array.sort(function(a, b) {
            var x = a[key]; var y = b[key];
            return ((x < y) ? -1 : ((x > y) ? 1 : 0));
        });
    };

    //Select / Unselect All Members
    $scope.selectAll = function(all) {
        $scope.select_all = all;
        for (var i = 0; i < $scope.importMembers.length; i++) {
            if (all) {
                $scope.selectMember($scope.importMembers[i]);
            }else {
                $scope.unselectMember($scope.importMembers[i]);
            }
        }
    };

    //Update Member
    $scope.updateMember = function(member) {
        if (member.isSelected) {
            $scope.unselectMember(member);
        }else {
            $scope.selectMember(member);
        }
    };

    //Unselect member from UI, remove from selectedmembers list
    $scope.unselectMember = function(member) {
        var index = $scope.importMembers.indexOf(member);
        var id = 'Id';
        if (member.PersonContactId) {
           id = 'PersonContactId';
        }
        var i = $scope.selectedMembers[$scope.memberType].indexOf(member[id].value);
        $scope.importMembers[index].isSelected = false;
        $scope.selectedMembers[$scope.memberType].splice(i, 1);
        $scope.select_all = false;
    };

    //Select member in UI, add to selectedmembers list
    $scope.selectMember = function(member) {
        var index = $scope.importMembers.indexOf(member);
        var id = 'Id';
        if (member.PersonContactId) {
           id = 'PersonContactId';
        }
        var i = $scope.selectedMembers[$scope.memberType].indexOf(member[id].value);
        $scope.importMembers[index].isSelected = true;
        if (i < 0) {
            $scope.selectedMembers[$scope.memberType].push($scope.importMembers[index][id].value);
        }
    };

    $scope.calcTotalSelected = function() {
        var count = 0;
        count += $scope.selectedMembers.leadIds.length;
        count += $scope.selectedMembers.contactIds.length;
        return count;
    };

    $scope.calcPageNo = function() {
        var str = 'No Records';
        if ($scope.totalRecords) {
            if ($scope.importMembers.length === $scope.pageSize) {
                str = ((($scope.currentPage * $scope.pageSize) - $scope.pageSize) + 1) + ' - ' + ($scope.currentPage * $scope.pageSize) + ' of ' + $scope.totalRecords;
            } else {
                str = ((($scope.currentPage * $scope.pageSize) - $scope.pageSize) + 1) + ' - ' + ($scope.totalRecords) + ' of ' + $scope.totalRecords;
            }
        }
        return str;
    };

    $scope.addAll = function() {
        if (!$scope.nextPageAction && !$scope.prevPageAction) {
            var ids = [];
            var id = 'Id';
            $scope.addCampaignMembersAction.remote.remoteClass =  'CampaignAddMemberHandler';
            $scope.addCampaignMembersAction.remote.params.campaignId =  $scope.campaignId;
            for (var i = 0; i < $scope.importMembers.length; i++) {
                if ($scope.importMembers[i].PersonContactId) {
                    id = 'PersonContactId';
                }
                ids.push($scope.importMembers[i][id].value);
            }
            $scope.addCampaignMembersAction.remote.params[$scope.memberType] = ids;
            CampaignService.invokeAction($scope.addCampaignMembersAction).then(
            function(data) {
                console.log('success: ', data);
                $scope.showBanner = true;
                $scope.bannerText = 'All members belonging to ' + $scope.selectedfilter.name + ' have been added to your campaign';
            }, function(error) {
                $scope.showErrorBanner = true;
                $scope.bannerText = 'Failed to add members to campaign. ';
                console.error('error: ', error);
            });
        } else {
            $scope.addAllCampaignMembersAction.remote.remoteClass =  'CampaignAddMemberHandler';
            $scope.addAllCampaignMembersAction.remote.params.filterId = $scope.selectedfilter.id;
            $scope.addAllCampaignMembersAction.remote.params.parentObject = $scope.selectedfilter.parentObject;
            $scope.addAllCampaignMembersAction.remote.params.campaignId = $scope.campaignId;
            if ($scope.selectedfilter.attributesId) {
                $scope.addAllCampaignMembersAction.remote.params.attributeString =  $scope.selectedfilter.attributesId;
            } else {
                $scope.addAllCampaignMembersAction.remote.params.attributeString =  '';
            }
            if ($scope.searchText) {
                $scope.addAllCampaignMembersAction.remote.params.searchText =  $scope.searchText;
            } else {
                $scope.addAllCampaignMembersAction.remote.params.searchText =  '';
            }

            CampaignService.invokeAction($scope.addAllCampaignMembersAction).then(
                function(data) {
                    $scope.showBanner = true;
                    $scope.bannerText = 'All members belonging to ' + $scope.selectedfilter.name + ' have been added to your campaign';
                    console.log('sucess', data);
                }, function(error) {
                    $scope.showErrorBanner = true;
                    $scope.bannerText = 'Failed to add members to campaign: ';
                    console.error('error: ', error);
                });
        }
    };

    //Get importedMembers list based on selectedfilter;
    //campaign-member-filter also calls with updated attributes
    $scope.query = function(selectedfilter) {
        $scope.importMembers = {};
        selectedfilter = JSON.parse(selectedfilter);
        if (selectedfilter.parentObject === 'Lead') {
            $scope.memberType = 'leadIds';
        } else {
            $scope.memberType = 'contactIds';
        }
        $scope.selectedfilter = selectedfilter;
        $scope.getRecordsAction.remote.remoteClass =  'CampaignAddMemberHandler';
        $scope.getRecordsAction.remote.params.filterId =  selectedfilter.id;
        $scope.getRecordsAction.remote.params.parentObject =  selectedfilter.parentObject;
        $scope.getRecordsAction.remote.params.pageSize =  $scope.pageSize;
        $scope.getRecordsAction.remote.params.pageNumber =  $scope.currentPage;
        if (selectedfilter.attributesId) {
            $scope.getRecordsAction.remote.params.attributeString =  selectedfilter.attributesId;
        } else {
            $scope.getRecordsAction.remote.params.attributeString =  '';
        }
        if ($scope.searchText) {
            $scope.getRecordsAction.remote.params.searchText =  $scope.searchText;
        } else {
            $scope.getRecordsAction.remote.params.searchText =  '';
        }
        if (!$scope.getRecordsAction.remote.params.lastRecordId) {
            $scope.getRecordsAction.remote.params.lastRecordId = '';
        }
        CampaignService.invokeAction($scope.getRecordsAction).then(
            function(data) {
                var id = 'Id';
                var selectedCount = 0;
                console.log('success: ', data);
                $scope.importMembers = data.result.records;
                $scope.totalRecords = data.result.totalSize;
                $scope.nextPageAction = data.result.actions.nextPageAction;
                $scope.prevPageAction = data.result.actions.prevPageAction;
                $scope.addCampaignMembersAction = data.result.actions.addCampaignMembersAction;
                $scope.addAllCampaignMembersAction = data.result.actions.addAllCampaignMembersAction;
                $scope.select_all = false;
                $scope.show_company = false;
                if(!$scope.addCampaignMembersAction && data.result.actions.addCampaignMembersAction){
                    $scope.addCampaignMembersAction = data.result.actions.addCampaignMembersAction;
                }
                for (var i = 0; i < $scope.importMembers.length; i++) {
                    if ($scope.importMembers[i].Company) {
                        $scope.show_company = true;
                    }
                    if ($scope.importMembers[i].PersonContactId) {
                        id = 'PersonContactId';
                    }
                    if ($scope.selectedMembers[$scope.memberType].indexOf($scope.importMembers[i][id].value.toString()) > -1) {
                       $scope.updateMember($scope.importMembers[i]);
                       selectedCount += 1;
                    }
                }
                if (selectedCount === $scope.importMembers.length) {
                    $scope.select_all = true;
                }

            }, function(error) {
                console.error('error: ', error);
                $scope.importMembers = [];
            });
    };

    //Show Advanced Filter
    $scope.showFilter = function() {
        if ($scope.show_filter) {
            $scope.show_filter = false;
        } else {
            $scope.show_filter = true;
        }
        var message = {'event': 'show_advancedfilter', 'message': $scope.show_filter};
        $rootScope.$broadcast('show_advancedfilter',$scope.show_filter);
    };


    $rootScope.$on('show_advancedfilter', function(event, data) {
        $scope.show_filter = data;
    });

    //Compile attribute string for filter, calls query
    $scope.invokeFilter = function(attr) {
        console.log('Attribute: ', attr);
        var str = '';
        var compositeStr = '';

        //On/Off & 3 States:
        if (attr.isSelected) {
            str += attr.id;
        }
        if (!attr.isSelected) {
            delete $scope.attributes[attr.id];
        }

        //Sliders:
        if (attr.minvalue && attr.minvalue) {
            if (attr.minvalue.toString() === '1' && attr.maxvalue.toString() === '5') {
                delete $scope.attributes[attr.id];
            } else {
                if (attr.minvalue) {
                    str += attr.id + ':' + attr.minvalue + '_';
                }
                if (attr.maxvalue) {
                    str += attr.maxvalue;

                }
            }
        }

        //Text value:
        if (attr.value) {
            str += attr.id + ':' + attr.value;
        } else {
            delete $scope.attributes[attr.id];
        }

        console.log('attr: ', str);
        if (str) {
            $scope.attributes[attr.id] = str;
        }
        for (var key in $scope.attributes) {
            compositeStr  += $scope.attributes[key] + ',';
        }
        $rootScope.$broadcast('update_selectedfilter', compositeStr);
    };

    $rootScope.$on('update_selectedfilter', function(event, data) {
        if ($scope.selectedfilter) {
            $scope.selectedfilter.attributesId = data;
            $scope.query(JSON.stringify($scope.selectedfilter));
        }
    });

    //Calls next page action and populates importedMembers
    $scope.nextPage = function() {
        $scope.nextPageAction.remote.remoteClass =  'CampaignAddMemberHandler';
        $scope.nextPageAction.remote.params.methodName = 'nextPageAction';
        CampaignService.invokeAction($scope.nextPageAction).then(
            function(data) {
                var id = 'Id';
                var selectedCount = 0;
                console.log('success: ', data);
                $scope.importMembers = data.result.records;
                $scope.nextPageAction = data.result.actions.nextPageAction;
                $scope.prevPageAction = data.result.actions.prevPageAction;
                $scope.addCampaignMembersAction = data.result.actions.addCampaignMembersAction;
                $scope.currentPage += 1;
                $scope.select_all = false;
                for (var i = 0; i < $scope.importMembers.length; i++) {
                    if ($scope.importMembers.PersonContactId) {
                        id = 'PersonContactId';
                    }
                    if ($scope.selectedMembers[$scope.memberType].indexOf($scope.importMembers[i][id].value.toString()) > -1) {
                       $scope.updateMember($scope.importMembers[i]);
                        selectedCount += 1;
                    }
                }
                if (selectedCount === $scope.importMembers.length) {
                    $scope.select_all = true;
                }
            }, function(error) {
                console.error('error: ', error);
            });
    };

    //Calls previous page action and populates importedMembers
    $scope.previousPage = function() {
        $scope.prevPageAction.remote.remoteClass =  'CampaignAddMemberHandler';
        $scope.prevPageAction.remote.params.methodName = 'prevPageAction';
        CampaignService.invokeAction($scope.prevPageAction).then(
            function(data) {
                var id = 'Id';
                var selectedCount = 0;
                console.log('success: ', data);
                $scope.importMembers = data.result.records;
                $scope.nextPageAction = data.result.actions.nextPageAction;
                $scope.prevPageAction = data.result.actions.prevPageAction;
                $scope.addCampaignMembersAction = data.result.actions.addCampaignMembersAction;
                $scope.currentPage -= 1;
                $scope.select_all = false;
                for (var i = 0; i < $scope.importMembers.length; i++) {
                    if ($scope.importMembers.PersonContactId) {
                        id = 'PersonContactId';
                    }
                    if ($scope.selectedMembers[$scope.memberType].indexOf($scope.importMembers[i][id].value.toString()) > -1) {
                       $scope.updateMember($scope.importMembers[i]);
                       selectedCount += 1;
                    }
                }
                if (selectedCount === $scope.importMembers.length) {
                    $scope.select_all = true;
                }
            }, function(error) {
                console.error('error: ', error);
            });

    };

    //Calls add member campaign action
    $scope.addSelected = function() {
        console.log($scope.selectedMembers);
        $scope.addCampaignMembersAction.remote.remoteClass =  'CampaignAddMemberHandler';
        $scope.addCampaignMembersAction.remote.params.campaignId =  $scope.campaignId;
        $scope.addCampaignMembersAction.remote.params.contactIds =  $scope.selectedMembers.contactIds;
        $scope.addCampaignMembersAction.remote.params.leadIds =  $scope.selectedMembers.leadIds;
        CampaignService.invokeAction($scope.addCampaignMembersAction).then(
            function(data) {
                console.log('success: ', data);
                $scope.selectedMembers.leadIds = [];
                $scope.selectedMembers.contactIds = [];
                $scope.showBanner = true;
                $scope.bannerText = 'Selected members have been successfully added to your campaign.';
            }, function(error) {
                $scope.showErrorBanner = true;
                $scope.bannerText = 'Failed to add members to campaign. ', +error.message;
                console.error('error: ', error);
            });
    };

});

},{}],3:[function(require,module,exports){
angular.module('campaignCallList').controller('CampaignCallListController', function(
    $scope, $rootScope, CampaignService, CampaignAggInfo) {
    'use strict';
    $scope.nameSpacePrefix = fileNsPrefix();
    $scope.isLoaded = false;
    $scope.obj = {};
    $scope.isTimeSensitive = false;
    $scope.isPastDue = false;
    // How many days to make a card timesensitive
    $scope.timeFrame = 3;
    $scope.listMembers = {};
    $scope.objs = [];
    $scope.currentPage = 0;
    $scope.memberStatus = {};
    $scope.searchText = '';
    $scope.filter = {
        'sortBy': {
            'LastName': false,
            'Status': false,
            'TargetCallDate__c': false
        },
        'dateRange': {
            'TODAY': false,
            'THIS_WEEK': false,
            'THIS_MONTH': false
        },
        'status': {}
    };
    $scope.disableNextBtn = false;
    $scope.show_filter = false;
    $scope.emptyResults = false;
    $scope.campaignAggInfo = new CampaignAggInfo($scope);
    $scope.campaignAggInfo.getMembersAggInfoByCampaign();
    $scope.isListLoading = false;

    $scope.search = function() {
        var getMemberListByCampaign = $scope.listMembers.actions.getSearchMemberList;
        getMemberListByCampaign.remote.params.searchText =  $scope.searchText;
        CampaignService.invokeAction(getMemberListByCampaign).then(
            function(data) {
                if (data.result.records.length > 0) {
                    $scope.currentPage = 0;
                    $scope.objs = [];
                    console.log('success: ', data);
                    $scope.setObj(data);
                }  else {
                    $scope.listMembers.records = '';
                    delete $scope.listMembers.actions.nextMemberList;
                    delete $scope.listMembers.actions.prevMemberList;
                    console.log($scope.listMembers);
                }
            }, function(error) {
                console.error('error: ', error);
            });
    };

    $scope.setSortBy = function(key) {
        for (var obj in $scope.filter.sortBy) {
            $scope.filter.sortBy[obj] = false;
        }
        $scope.filter.sortBy[key] = true;
        console.log($scope.filter.sortBy);
    };

    $scope.setTargetDate = function(key) {
        for (var obj in $scope.filter.dateRange) {
            $scope.filter.dateRange[obj] = false;
        }
        $scope.filter.dateRange[key] = true;
        console.log($scope.filter.dateRange);
    };

    // $scope.clearQuery = function(){
    //     var obj = '';
    //     for (obj in $scope.filter.status) {
    //         if ($scope.filter.status[obj]) {
    //             $scope.filter.status[obj] = false;
    //         }
    //     }
    //     for (obj in $scope.filter.dateRange) {
    //         if ($scope.filter.dateRange[obj] && obj !== 'ALL') {
    //             $scope.filter.dateRange[obj] = false;
    //         }
    //     }
    //     for (obj in $scope.filter.sortBy) {
    //         if ($scope.filter.sortBy[obj]) {
    //             $scope.filter.sortBy[obj] = false;
    //         }
    //     }
    // };

    $scope.query = function() {
        var q = '';
        var obj  = '';
        var sortFields = '';
        $scope.emptyResults = false;
        for (obj in $scope.filter.status) {
            if ($scope.filter.status[obj]) {
                q += 'Status:' + obj + ', ';
            }
        }
        for (obj in $scope.filter.dateRange) {
            if ($scope.filter.dateRange[obj] && obj !== 'ALL') {
                q += $scope.nameSpacePrefix + 'TargetCallDate__c:' + obj + ', ';
            }
        }
        for (obj in $scope.filter.sortBy) {
            if ($scope.filter.sortBy[obj]) {
                if (obj.indexOf('__c') > -1) {
                    sortFields += $scope.nameSpacePrefix + obj;
                }else {
                    sortFields += obj;
                }
            }
        }

        var updateListMembers = $scope.listMembers.actions.getSearchMemberList;
        updateListMembers.remote.params.filters = q;
        updateListMembers.remote.params.sortFields = sortFields;
        console.log(updateListMembers);

        console.log('query:',  updateListMembers.remote.params);
        CampaignService.invokeAction(updateListMembers).then(
            function(data) {
                console.log('success: ', data);
                $scope.reordered = false;
                if (data.result.records.length > 0) {
                    $scope.currentPage = 0;
                    $scope.reorder = false;
                    $scope.objs = [];
                    $scope.show_filter = false;
                    $scope.emptyResults = false;
                    $scope.setObj(data);
                } else {
                    $scope.emptyResults = true;
                    $scope.listMembers.records = '';
                    delete $scope.listMembers.actions.nextMemberList;
                    delete $scope.listMembers.actions.prevMemberList;
                    console.log($scope.listMembers);
                }
                console.log('EMPTY RESULTS:', $scope.emptyResults);
            }, function(error) {
                console.error('error: ', error);
            });
    };

    $scope.setTimeFrame = function(objDate, i) {
        var day2min = 1440; // 1440 mins in a day
        var timeFrame = (day2min * $scope.timeFrame);
        var date = new Date(new Date().getTime());
        var tempObjDate = new Date(objDate);
        var diffMins = (tempObjDate - date) / 60000;
        if (diffMins <= timeFrame &&  $scope.listMembers.records[i].Status.value !== 'Responded') {
            $scope.listMembers.records[i].isTimeSensitive = true;
            if (diffMins < 0) {
                $scope.listMembers.records[i].isPastDue = true;
            }
        }
    };

    $scope.setObj = function(obj) {
        var i, objDate;
        $scope.obj = obj;
        $scope.listMembers = obj.result;
        $scope.objs[$scope.currentPage] = $scope.listMembers;
        if ($scope.listMembers.actions.nextMemberList) {
            $scope.disableNextBtn = false;
        }else {
            $scope.disableNextBtn = true;
        }
        if ($scope.listMembers) {
            for (i = 0; i < $scope.listMembers.records.length; i++) {
                objDate = $scope.listMembers.records[i][$scope.nameSpacePrefix + 'TargetCallDate__c'].value;
                if (objDate) {
                    $scope.setTimeFrame(objDate, i);
                    $scope.listMembers.records[i].formattedDate  =  new Date(objDate).toLocaleString().split(',')[0];
                }
            }
        }

        if (!$scope.pageSize && $scope.listMembers.actions.getSearchMemberList) {
            $scope.pageSize = Number($scope.listMembers.actions.getSearchMemberList.remote.params.pageSize);
        }

        $scope.totalRecords = $scope.listMembers.totalSize;
    };

    $scope.callListInit = function() {
        CampaignService.getMemberStatus($scope.listMembers.records[0].CampaignId.value, $scope).then(function(result) {
                var i;
                for (i = 0; i < result.result.records.length; i++) {
                    if (result.result.records[i].Label) {
                        $scope.filter.status[result.result.records[i].Label.value] = false;
                    }
                }
                console.log('get member status: ', $scope.filter);
            }, function(error) {
                console.log('error: ', error);
            });

    };

    $scope.cachedListMemberId = '';
    $scope.campaignMemberDetail = function(listMember) {
        var updateDatasource = {
            event: 'updateDatasource',
            message: {
                params: {
                    storyId: listMember.Id.value
                },
                appendFlag: false,
                updateSilently: false,
                bypassTemplateRefresh: false
            }
        };
        $rootScope.$broadcast('campaign-member-data-object', listMember);
        if (listMember.Id.value !== $scope.cachedListMemberId) {
            $rootScope.currentStoryId = listMember.Id.value;
            $rootScope.$broadcast('vlocity.layout.campaign-member-log-actions.events', updateDatasource);
            $rootScope.$broadcast('vlocity.layout.campaign-member-stories.events', updateDatasource);
        }
        $scope.cachedListMemberId = listMember.Id.value;
    };

    $scope.nextPage = function() {
        var updateListMembers = {};
        if ($scope.objs[$scope.currentPage + 1]) {
            $scope.listMembers = $scope.objs[$scope.currentPage + 1];
            $scope.currentPage += 1;
        } else {
            updateListMembers = $scope.listMembers.actions.nextMemberList;

            //FOUND BUG FOR FILTER BY STATUS:
            $scope.isListLoading = true;
            CampaignService.invokeAction(updateListMembers).then(
                function(data) {
                    console.log('success: ', data);
                    $scope.currentPage += 1;
                    $scope.setObj(data);
                    if ($scope.filter.sortBy.Status) {
                        $scope.reorderList('Status');
                    } if ($scope.filter.sortBy.TargetCallDate__c) {
                        $scope.reorderList($scope.nameSpacePrefix + 'TargetCallDate__c');
                    }
                    $scope.isListLoading = false;
                }, function(error) {
                    console.error('error: ', error);
                    $scope.isListLoading = false;
                });
        }
    };

    $scope.previousPage = function() {
        //var pageSize = updateListMembers.remote.params.pageSize;
        if ($scope.currentPage !== 0) {
            $scope.currentPage -= 1;
            $scope.listMembers = $scope.objs[$scope.currentPage];
            if ($scope.listMembers.actions.nextMemberList) {
                $scope.disableNextBtn = false;
            }else {
                $scope.disableNextBtn = true;
            }
        }
    };

    $scope.setFilterStatus = function(key, value) {
        $scope.filter.status[key] = value;
    };

    $scope.refreshList = function() {
        var message = {
            event: 'reload'
        };
        $rootScope.$broadcast('vlocity.layout.campaign-member-list.events', message);
    };

    $scope.$on('campaign-member-deleted', function(e, data) {
        if ($scope.listMembers && $scope.listMembers.records) {
            for (var i = 0; i < $scope.listMembers.records.length; i++) {
                if ($scope.listMembers.records[i].Id.value === data.campaignMemberId) {
                    if (i < $scope.listMembers.records.length - 1) {
                        $scope.campaignMemberDetail($scope.listMembers.records[i + 1]);
                    }else if (i ===  $scope.listMembers.records.length - 1 && i > 0) {
                        $scope.campaignMemberDetail($scope.listMembers.records[i - 1]);
                    }
                    $scope.listMembers.records.splice(i,1);
                    break;
                }
            }
        }
    });

    $scope.calcPageNo = function() {
        var str = 'No Records';
        $scope.pageSize = 10;
        if ($scope.totalRecords) {
            if ($scope.listMembers.records.length === $scope.pageSize) {
                str = (((($scope.currentPage + 1) * $scope.pageSize) - $scope.pageSize) + 1) + ' - ' + (($scope.currentPage + 1) * $scope.pageSize) + ' of ' + $scope.totalRecords;
            } else {
                str = (((($scope.currentPage + 1) * $scope.pageSize) - $scope.pageSize) + 1) + ' - ' + ($scope.totalRecords) + ' of ' + $scope.totalRecords;
            }
        }
        return str;
    };

    $scope.navigateTo = function(member) {
        var id = '';
        if (member.LeadId.value !== null) {
            id = member.LeadId.value;
        }if (member.ContactId.value !== null) {
            id = member.ContactId.value;
        }
        if (id) {
            if ((typeof sforce !== 'undefined') && (sforce !== null)) {
                sforce.one.navigateToSObject(id, 'detail');
            } else {
                window.location.href = '/' + id;
            }
        }
    };

    $rootScope.$on('update-member-status', function(e, data) {

        var reordered = false;
        $scope.isListLoading = true;
        if ($scope.filter.status && $scope.listMembers.records) {
            var activeStatus = [];
            var filterSet = false;
            var key;
            for (key in $scope.filter.status) {
                if ($scope.filter.status[key]) {
                    activeStatus.push(key);
                    filterSet = true;
                }
            }
            if (filterSet && activeStatus.indexOf(data.Status.value) < 0) {
                $scope.popUnoredItem(data);
                reordered = true;
            }
        }
        if ($scope.filter.sortBy.Status && !reordered) {
            if ($scope.objs[$scope.currentPage].records[$scope.objs[$scope.currentPage].records.length - 1] === data) {
                if ($scope.listMembers.actions.nextMemberList && !$scope.objs[$scope.currentPage + 1]) {
                var updateListMembers = $scope.listMembers.actions.nextMemberList;
                CampaignService.invokeAction(updateListMembers).then(
                    function(data) {
                        $scope.objs[$scope.currentPage + 1] = data.result;
                        $scope.reorderList('Status');
                    }, function(error) {
                        console.error('error: ', error);
                    });
                }
            } else {
               $scope.reorderList('Status');
            }
        }
        if ($scope.filter.dateRange && $scope.listMembers.records) {
            var activeDateRange = [];
            var filterSet = false;
            for (var key in $scope.filter.dateRange) {
                if ($scope.filter.dateRange[key] && key !== 'ALL') {
                    activeDateRange.push(key);
                    filterSet = true;
                }
            }
            $rootScope.log('targetCallDate', data);
            console.log(activeDateRange);
            if (filterSet && activeDateRange.indexOf(data[$scope.nameSpacePrefix + 'TargetCallDate__c']) < 0) {
                $scope.popUnoredItem(data);
                reordered = true;
            }
        }
        if ($scope.filter.sortBy.TargetCallDate__c && !reordered) {
            if ($scope.objs[$scope.currentPage].records[$scope.objs[$scope.currentPage].records.length - 1] === data) {
                if ($scope.listMembers.actions.nextMemberList && !$scope.objs[$scope.currentPage + 1]) {
                var updateListMembers = $scope.listMembers.actions.nextMemberList;
                CampaignService.invokeAction(updateListMembers).then(
                    function(data) {
                        $scope.objs[$scope.currentPage + 1] = data.result;
                        $scope.reorderList($scope.nameSpacePrefix + 'TargetCallDate__c');
                    }, function(error) {
                        console.error('error: ', error);
                    });
                }

            } else {
               $scope.reorderList($scope.nameSpacePrefix + 'TargetCallDate__c');
            }
        }
        $scope.isListLoading = false;

    });

    $scope.reorderList = function(key) {
        var temp = [];
        temp = $scope.concatMembers();
        if (key === ($scope.nameSpacePrefix + 'TargetCallDate__c')) {
            $scope.sortByDate(temp, key);
            var j = 0;
            for (var i = 0; i < temp.length; i++) {
                if (temp[i][key].value == null) {
                    j += 1;
                }
            }
            var nulls = temp.slice(0, j);
            temp = temp.splice(j, temp.length);
            temp = temp.concat(nulls);
        } else {
            $scope.sortByKey(temp, key);
        }
        $scope.redistributeMembers(temp);
        $scope.listMembers.records = $scope.objs[$scope.currentPage].records;
    };

    $scope.concatMembers = function() {
        var temp = [];
        var i, t;
        for (i = 0; i < $scope.objs.length; i++) {
            t = $scope.objs[i].records;
            temp = temp.concat(t);
        }
        return temp;
    };

    $scope.redistributeMembers = function(temp) {
        var newPage, i;
        for (i = 0; i < $scope.objs.length; i++) {
            newPage = temp.slice(0, $scope.pageSize);
            temp = temp.splice($scope.pageSize, temp.length);
            $scope.objs[i].records = newPage;
        }
    };

    //Sorts array of objects by key
    $scope.sortByKey = function(array, key) {
        return array.sort(function(a, b) {
            var x = a[key].value; var y = b[key].value;
            return ((x < y) ? -1 : ((x > y) ? 1 : 0));
        });
    };

    //Sorts array of objects by date
    $scope.sortByDate = function(array, key) {
        return array.sort(function(a, b) {
            var x = new Date(a[key].value); var y = new Date(b[key].value);
            return ((x < y) ? -1 : ((x > y) ? 1 : 0));
        });
    };

    $scope.popUnoredItem = function(data) {
        //Remove changed member from list;
        $scope.objs[$scope.currentPage].records.splice($scope.listMembers.records.indexOf(data), 1);
        //Get next page if none cached; get next and redistrubte;
        if (!$scope.objs[$scope.currentPage + 1] && $scope.objs[$scope.currentPage].actions.nextMemberList) {
            var updateListMembers = $scope.objs[$scope.objs.length - 1].actions.nextMemberList;
            updateListMembers.remote.params.pageSize = ($scope.pageSize + 1).toString();
            CampaignService.invokeAction(updateListMembers).then(
                function(data) {
                    var temp;
                    console.log('success: ', data);
                    $scope.objs[$scope.currentPage + 1] = data.result;
                    temp = $scope.concatMembers();
                    $scope.redistributeMembers(temp);
                    $scope.listMembers = $scope.objs[$scope.currentPage];
                    $scope.totalRecords -= 1;
                }, function(error) {
                    console.error('error: ', error);
                });
        } else {
            var temp;
            temp = $scope.concatMembers();
            $scope.redistributeMembers(temp);
            $scope.listMembers = $scope.objs[$scope.currentPage];
            $scope.totalRecords -= 1;
        }
    };

});

},{}],4:[function(require,module,exports){
angular.module('campaignCallList').controller('CampaignDetailsController', function(
    $scope, $rootScope, CampaignAggInfo) {
    'use strict';
    $scope.campaignAggInfo = new CampaignAggInfo($scope);

    $scope.toggleCollapseRightCol = function() {
        console.log('toggling');
        if ($rootScope.rightColumn.toggleRightClass === 'toggle-right-expanded') {
            $rootScope.rightColumn = {
                toggleRightClass: 'toggle-right-collapsed',
                largeBPWidth: '9',
                toggleIcon: 'richtextoutdent'
            };
        } else {
            $rootScope.rightColumn = {
                toggleRightClass: 'toggle-right-expanded',
                largeBPWidth: '6',
                toggleIcon: 'richtextindent'
            };
        }
    };
});

},{}],5:[function(require,module,exports){
angular.module('campaignCallList').controller('CampaignMemberController', function(
    $scope, $rootScope, $timeout, CampaignService, CampaignAggInfo, $sldsModal) {
    'use strict';
    $scope.nameSpacePrefix = fileNsPrefix();
    $scope.isLoaded = false;
    $scope.obj = {};
    $scope.memberTabs = [];
    $scope.toggleTabsClass = '';
    $scope.sldsActivePane = -1;
    $scope.statusOpen = false;
    $scope.campaignAggInfo = new CampaignAggInfo($scope);
    $scope.callBacks = [{
        label: 'Call Back: Tomorrow',
        action: 'oneDay'
    }, {
        label: 'Call Back: One Week',
        action: 'oneWeek'
    }, {
        label: 'Call Back: One Month',
        action: 'oneMonth'
    }];
    //$scope.emailModel = {};

    $scope.$on('campaign-member-data-object', function(e, data) {
        $scope.campaignMember = data;
        $scope.campaignMemberId = data.Id.value;
        $rootScope.log('New Campaign Member', $scope.campaignMember);
        $scope.cardLoaded = true;
        if ($scope.campaignMember.ContactId) {
            $scope.memberActions = [{
                name: 'Script',
                label: 'Script',
                icon: 'edit_form',
                class: 'script-action',
                url: $scope.campaignMember[$scope.nameSpacePrefix + 'CampaignOmniScriptURL__c'].value
            },  {
                name: 'Delete',
                label: '',
                icon: 'delete',
                class: 'delete-action',
                url: ''
            }];
            if ($scope.campaignMember.actions.sendEmail)
            {
                $scope.memberActions.push({
                    name: 'Email',
                    label: 'Email',
                    icon: 'email',
                    class: 'email-action',
                    url: ''
                });
            }
            $rootScope.log('$scope.memberActions: ', $scope.memberActions);
        }
        if ($scope.campaignMember.CampaignId && angular.equals({}, $rootScope.memberStatus)) {
            $rootScope.log('campaignId: ', $scope.params.id);
            CampaignService.getMemberStatus($scope.params.id, $scope).then(function(result) {
                $rootScope.memberStatus = result;
                $rootScope.log('getMemberStatus: ', $rootScope.memberStatus);
                $scope.isLoaded = true;
                $rootScope.log('$scope', $scope);
            }, function(error) {
                $rootScope.log('error: ', error);
            });
        }
    });

    $scope.createLogs = function(records) {
        var i, j, tab, field, coeff, now, rounded;
        if (!$scope.memberTabs.length) {
            $scope.memberTabs = records;
            for (i = 0; i < $scope.memberTabs.length; i++) {
                tab = {
                    title: 'New ' + $scope.memberTabs[i].fields.storyObject.objName,
                    // template: 'member-tabs-new-' + $scope.memberTabs[i].fields.storyObject.objName.toLowerCase() + '.tpl.html',
                    template: 'member-tabs-form.tpl.html',
                    className: 'new-' + $scope.memberTabs[i].fields.storyObject.objName.toLowerCase()
                };
                // Add default now dates to date and datetime fields:
                for (j = 0; j < $scope.memberTabs[i].fields.storyObject.fieldList.length; j++) {
                    field = $scope.memberTabs[i].fields.storyObject.fieldList[j];
                    coeff = 1000 * 60 * 5;
                    now = new Date();
                    rounded = new Date(Math.round(now.getTime() / coeff) * coeff);
                    if ($scope.memberTabs[i].fields.storyObject.fieldNameTypeMap[field].indexOf('DATE') > -1) {
                        $scope.memberTabs[i].fields.storyObject.fieldValueMap[field] = new Date($scope.formatDatetime(rounded));
                    }
                }
                $scope.memberTabs[i].tabUI = tab;
            }
            $rootScope.log('memberTabs', $scope.memberTabs);
        }
    };

    $scope.showTabPanes = function() {
        if ($scope.toggleTabsClass === 'via-toggle-tabs-collapsed' ||
            $scope.toggleTabsClass === '') {
            $scope.toggleTabsClass = 'via-toggle-tabs-expanded';
        }
    };

    $scope.hideTabPanes = function() {
        $scope.toggleTabsClass = 'via-toggle-tabs-collapsed';
        $timeout(function() {
            $scope.sldsActivePane = -1;
        }, 500);
    };

    // Button click function for log action tabs
    $scope.createNewStory = function(tab) {
        var updateDatasource, i;
        var storyObject = tab.fields.storyObject;
        var actionObj = tab.actions['save' + storyObject.objType];
        actionObj.remote.remoteClass = 'StoryListHandler';
        actionObj.remote.params.attMap = storyObject.fieldValueMap;
        actionObj.remote.params.fieldNameTypeMap = storyObject.fieldNameTypeMap;
        actionObj.remote.params.objName = storyObject.objType;
        $rootScope.log('storyObject.objType: ', storyObject.objType);
        $rootScope.log('actionObj: ', actionObj);
        CampaignService.invokeAction(actionObj).then(function(result) {
            $rootScope.log('Result for createNewStory: ', result);
            updateDatasource = {
                event: 'updateDatasource',
                message: {
                    params: {
                        storyId: actionObj.remote.params.storyId
                    },
                    appendFlag: false,
                    updateSilently: false,
                    bypassTemplateRefresh: false
                }
            };
            $rootScope.$broadcast('vlocity.layout.campaign-member-stories.events', updateDatasource);
            $scope.hideTabPanes();
            $timeout(function() {
                for (i = 0; i < storyObject.fieldList.length; i++) {
                    if (storyObject.fieldNameTypeMap[storyObject.fieldList[i]] === ('BOOLEAN')) {
                        storyObject.fieldValueMap[storyObject.fieldList[i]] = false;
                    } else if (storyObject.fieldNameTypeMap[storyObject.fieldList[i]].indexOf('DATE') < 0) {
                        storyObject.fieldValueMap[storyObject.fieldList[i]] = null;
                    }
                }
            }, 500);
        }, function(error) {
            $rootScope.log('There has been an error: ', error);
        });
    };

    $rootScope.log('$scope', $scope);
    $rootScope.log('$scope.campaignMember: ', $scope.campaignMember);

    $scope.setObj = function(obj) {
        $scope.obj = obj;
        $rootScope.log('obj', $scope.obj);
        $scope.isLoaded = true;
    };

    $scope.statusFilter = function(record) {
        if (record.Label.value !== $scope.campaignMember.Status.value) {
            return record;
        }
    };

    $scope.toggleStatusDropdown = function(e) {
        e.stopPropagation();
        $scope.statusOpen = !$scope.statusOpen;
    };

    $scope.updateMemberStatus = function(campaignMemberId, newStatus) {
        var updateMemberStatus = $scope.campaignMember.actions.updateMemberStatus;
        updateMemberStatus.remote.params.memberStatus = newStatus;
        updateMemberStatus.remote.params.campaignId = $scope.params.id;
        CampaignService.invokeAction(updateMemberStatus).then(function(data) {
            $rootScope.log('updated member status ', data);
            $scope.campaignMember.Status.value = newStatus;
            $scope.statusOpen = false;
            $rootScope.membersAggInfoByCampaign = data.result.records;
            $rootScope.membersAggInfoByCampaign.totalMembers = data.result.totalSize;
            $rootScope.$broadcast('update-member-status', $scope.campaignMember);
        }, function(error) {
            $rootScope.log('error: ', error);
        });
    };

    $scope.changeCallDate = function(callBackAction) {
        var date = new Date();
        var newDate;
        var updateTargetCallDate = $scope.campaignMember.actions.updateTargetCallDate;
        if (callBackAction === 'oneDay') {
            newDate = new Date(date.setDate(date.getDate() + 1));
            $scope.campaignMember.isTimeSensitive = true;
        } else if (callBackAction === 'oneWeek') {
            newDate = new Date(date.setDate(date.getDate() + 7));
            $scope.campaignMember.isTimeSensitive = false;
            $scope.campaignMember.isPastDue = false;
        } else {
            newDate = new Date(date.setMonth(date.getMonth() + 1));
            $scope.campaignMember.isTimeSensitive = false;
            $scope.campaignMember.isPastDue = false;
        }
        updateTargetCallDate.remote.params.targetCallDate = $scope.formatDatetime(newDate);
        CampaignService.invokeAction(updateTargetCallDate).then(
            function(data) {
                console.log('success: ', data);
                $scope.campaignMember[$rootScope.nsPrefix + 'TargetCallDate__c'].value = newDate.toString();
                $scope.campaignMember.formattedDate = newDate.toLocaleString().split(',')[0];
                $scope.statusOpen = false;
                $rootScope.$broadcast('update-member-status', $scope.campaignMember);
            },
            function(error) {
                console.error('error: ', error);
            });
    };

    $scope.formatDatetime = function(d) {
        return d.getFullYear() + '-' + ('0' + (d.getMonth() + 1)).slice(-2) + '-' +
            ('0' + (d.getDate())).slice(-2) + ' ' + ('0' + (d.getHours())).slice(-2) + ':' +
            ('0' + (d.getMinutes())).slice(-2) + ':' + ('0' + (d.getSeconds())).slice(-2);
    };

    $scope.goToOmniscript = function(url) {
        $rootScope.log('id: ', $scope.obj);
        $rootScope.log('action url: ', url);
        var nsUrl = url;
        if (sforce) {
            if (url.indexOf('%nsp%') > 0)
            {
                nsUrl = url.replace('%nsp%', $scope.nameSpacePrefix);
                $rootScope.log('action nsUrl: ', nsUrl);
            }
            sforce.one.navigateToURL(nsUrl);
        }
    };

    $scope.formatCallDate = function(date) {
        // var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
        var callDate = new Date(date);
        // var formattedCallDate = months[callDate.getMonth()] + ' ' + callDate.getDate() + ', ' + callDate.getFullYear();
        var formattedCallDate = (callDate.getMonth() + 1) + '/' + callDate.getDate() + '/' + callDate.getFullYear();
        return formattedCallDate;
    };

    $scope.deleteMember = function() {
        var deleteMember = $scope.campaignMember.actions.deleteMember;
        CampaignService.invokeAction(deleteMember).then(
            function(data) {
                $scope.currentPage = 0;
                $scope.objs = {};
                $scope.campaignMember = {};
                $scope.memberActions = [];
                $rootScope.log('success: ', data);
                $rootScope.$broadcast('campaign-member-deleted', data.result.records[0]);
            },
            function(error) {
                $rootScope.log('error: ', error);
            });
    };

    $scope.openEmailModal = function() {
        if ($scope.campaignMember.Email.value) {
            $sldsModal({
                templateUrl: 'member-email.tpl.html',
                scope: $scope,
                backdrop: 'static',
                show: true
            });
        } else {
            console.log('Can not send email as this campaignmember does not have a email address.');
        }
    };

    $scope.sendEmail = function(subj, msg) {
        var sendEmail = $scope.campaignMember.actions.sendEmail;
        sendEmail.remote.params.subject = subj;
        sendEmail.remote.params.message = msg;
        CampaignService.invokeAction(sendEmail).then(
            function(data) {
                $scope.currentPage = 0;
                $rootScope.log('success: ', data);
            },
            function(error) {
                $rootScope.log('error: ', error);
            });
    };

    $scope.invokeMemberActions = function(action) {
        if (action.name === 'Script') {
            $scope.goToOmniscript(action.url);
        } else if (action.name === 'Delete') {
            $scope.deleteMember();
        } else if (action.name === 'Email') {
            $scope.openEmailModal();
        }

    };

    $scope.navigateTo = function(member) {
        var id = '';
        if (member.LeadId.value !== null) {
            id = member.LeadId.value;
        }if (member.ContactId.value !== null) {
            id = member.ContactId.value;
        }
        if (id) {
            if ((typeof sforce !== 'undefined') && (sforce !== null)) {
                sforce.one.navigateToSObject(id, 'detail');
            } else {
                window.location.href = '/' + id;
            }
        }
    };
});

},{}],6:[function(require,module,exports){
angular.module('campaignCallList').controller('CampaignMemberStoriesController', function(
    $scope, $rootScope) {
    'use strict';
    // $rootScope.$on('campaign-member-id-sent', function(e, obj) {
    //     $scope.$parent.updateDatasource({storyId: obj.storyId}, false);
    // });
});

},{}],7:[function(require,module,exports){
angular.module('campaignCallList')
.factory('CampaignService', ['$http', 'dataSourceService', 'dataService', '$q', function($http, dataSourceService, dataService, $q) {
    'use strict';
    var REMOTE_CLASS = 'CampaignListHandler';
    var DUAL_DATASOURCE_NAME = 'Dual';
    var insideOrg = false;
    var errorContainer = {};

    function getDualDataSourceObj(actionObj) {
        var datasource = {};
        var temp = '';
        var nsPrefix = fileNsPrefix().replace('__', '');

        if (actionObj.remote.remoteClass) {
            temp = REMOTE_CLASS;
            REMOTE_CLASS = actionObj.remote.remoteClass;
        }
        if (actionObj) {
            datasource.type = DUAL_DATASOURCE_NAME;
            datasource.value = {};
            datasource.value.remoteNSPrefix = nsPrefix;
            datasource.value.inputMap = actionObj.remote.params || {};
            datasource.value.remoteClass = REMOTE_CLASS;
            datasource.value.remoteMethod = actionObj.remote.params.methodName;
            datasource.value.endpoint = actionObj.rest.link;
            datasource.value.methodType = actionObj.rest.method;
            datasource.value.body = actionObj.rest.params;
        } else {
            console.log('Error encountered while trying to read the actionObject');
        }
        if (temp) {
            REMOTE_CLASS = temp;
        }
        return datasource;
    }

    return {
        getMembersAggInfoByCampaign: function(campaignId, scope) {
            var deferred = $q.defer();
            var nsPrefix = fileNsPrefix().replace('__', '');
            var datasource = {};
            console.log('getting getMembersAggInfoByCampaign');
            datasource.type = 'Dual';
            datasource.value = {};
            datasource.value.remoteNSPrefix = nsPrefix;
            datasource.value.remoteClass = 'CampaignListHandler';
            datasource.value.remoteMethod = 'getMembersAggInfoByCampaign';
            datasource.value.inputMap = {
                'campaignId': campaignId
            };
            datasource.value.apexRemoteResultVar = 'result.records';
            datasource.value.methodType = 'GET';
            datasource.value.apexRestResultVar = 'result.records';
            // no need to pass forceTk client below because on desktop, dual datasource will use ApexRemote
            // and on Mobile Hybrid Ionic, dual datasource will use ApexRest via forceng
            dataSourceService.getData(datasource, scope, null).then(
                function(data) {
                    console.log(data);
                    deferred.resolve(data);
                }, function(error) {
                    console.error(error);
                    deferred.reject(error);
                });
            return deferred.promise;
        },

        getMemberStatus: function(campaignId, scope) {
            var deferred = $q.defer();
            var nsPrefix = fileNsPrefix().replace('__', '');
            var datasource = {};
            console.log('getting getMemberStatus');
            datasource.type = 'Dual';
            datasource.value = {};
            datasource.value.remoteNSPrefix = nsPrefix;
            datasource.value.remoteClass = 'CampaignListHandler';
            datasource.value.remoteMethod = 'getMemberStatusByCampaign';
            datasource.value.inputMap = {
                'campaignId': campaignId
            };
            datasource.value.apexRemoteResultVar = 'result.records';
            datasource.value.methodType = 'GET';
            datasource.value.apexRestResultVar = 'result.records';
            // no need to pass forceTk client below because on desktop, dual datasource will use ApexRemote
            // and on Mobile Hybrid Ionic, dual datasource will use ApexRest via forceng
            dataSourceService.getData(datasource, scope, null).then(
                function(data) {
                    console.log(data);
                    deferred.resolve(data);
                }, function(error) {
                    console.error(error);
                    deferred.reject(error);
                });
            return deferred.promise;
        },

        getAvailableProducts: function(orderId, forcetkClient) {
            var deferred = $q.defer();
            var payload = '[{"command":"getAvailProducts", "channel":"Mobile"}]';
            var method = 'POST';
            var endpoint;
            orderId = orderId ? orderId : '';
            endpoint = '/v1/CPQServices/' + orderId;
            console.log('getting getAvailableProducts');
            console.log(orderId);
            if (insideOrg) {

            } else { //outside
                dataService.getApexRest(endpoint,method,payload, forcetkClient).then(
                    function(data) {
                        console.log(data);
                        deferred.resolve(data.result);
                        // return records;

                    }, function(error) {
                        var errorMsg = '';
                        console.error(error);
                        try {
                            errorMsg = JSON.parse(error.responseText);
                            console.log(errorMsg[0]);
                            errorMsg = errorMsg[0].message;
                        }catch (e) {
                            errorMsg = error.status + ' - ' + error.statusText;
                        }

                        errorContainer.data = error;
                        errorContainer.message = errorMsg;
                        deferred.reject(errorContainer);
                    });
                return deferred.promise;
            }
        },
        /**
         * invokeAction : Use this method when the actions are straight forward based on actionObj.
         *
         * @param  {[object]} actionObj [Pass the action object]
         * @return {promise} [Result data]
         */
        invokeAction: function(actionObj) {
            var deferred = $q.defer();
            var datasource = getDualDataSourceObj(actionObj);

            dataSourceService.getData(datasource, null, null).then(
                function(data) {
                    deferred.resolve(data);
                }, function(error) {
                    deferred.reject(error);
                });
            return deferred.promise;
        }
    };
}]);

},{}],8:[function(require,module,exports){
angular.module('campaignCallList').service('CampaignAggInfo', function($rootScope, CampaignService) {
    'use strict';
    var CampaignAggInfo = function(scp) {
        this.initialize = function() {
            // anything that immediately should fire upon instantiation
        };

        this.getMembersAggInfoByCampaign = function() {
            CampaignService.getMembersAggInfoByCampaign(scp.params.id, scp).then(function(data) {
                $rootScope.log('getMembersAggInfoByCampaign: ', data);
                $rootScope.membersAggInfoByCampaign = data.result.records;
                $rootScope.membersAggInfoByCampaign.totalMembers = data.result.totalSize;
                $rootScope.log('$rootScope.membersAggInfoByCampaign', $rootScope.membersAggInfoByCampaign);
            }, function(error) {
                $rootScope.log('error: ', error);
            });
        };

        this.getStatusProgessStyle = function(status) {
            var statusProgressStyle = {};
            statusProgressStyle.width = ((status.value / $rootScope.membersAggInfoByCampaign.totalMembers) * 100) + '%';
            return statusProgressStyle;
        };

        this.campaignAggInfogetStatusProgressPlacement = function(index) {
            var statusLength = $rootScope.membersAggInfoByCampaign.length;
            if (index < (statusLength - 1)) {
                $rootScope.membersAggInfoByCampaign[index].position = '-left';
            } else {
                $rootScope.membersAggInfoByCampaign[index].position = '-right';
            }
        };
    };
    return (CampaignAggInfo);
});

},{}],9:[function(require,module,exports){
angular.module("campaignCallList").run(["$templateCache",function($templateCache){"use strict";$templateCache.put("SldsDatepicker.tpl.html",'<div class="slds-datepicker slds-dropdown slds-dropdown--right" aria-hidden="false" ng-class="\'datepicker-mode-\' + $mode">\n    <div class="slds-datepicker__filter slds-grid">\n        <div class="slds-datepicker__filter--month slds-grid slds-grid--align-spread slds-grow">\n            <div class="slds-align-middle">\n                <button type="button" class="slds-button slds-button--icon-container" ng-click="$selectPane(-1)">\n                    <svg aria-hidden="true" class="slds-button__icon slds-button__icon--small">\n                        <use xlink:href="{!URLFOR($Resource.slds, \'/assets/icons/utility-sprite/svg/symbols.svg#left\')}"></use>\n                    </svg>\n                    <span class="slds-assistive-text">Previous Month</span>\n                </button>\n            </div>\n            <button type="button" class="slds-button slds-button--neutral slds-align-middle" ng-click="$toggleMode()" aria-live="assertive" aria-atomic="true"><span ng-bind="title"></span></button>\n            <div class="slds-align-middle">\n                <button type="button" class="slds-button slds-button--icon-container" ng-click="$selectPane(+1)">\n                    <svg aria-hidden="true" class="slds-button__icon slds-button__icon--small">\n                        <use xlink:href="{!URLFOR($Resource.slds, \'/assets/icons/utility-sprite/svg/symbols.svg#right\')}"></use>\n                    </svg>\n                    <span class="slds-assistive-text">Next Month</span>\n                </button>\n            </div>\n        </div>\n    </div>\n    <table class="datepicker__month" role="grid" aria-labelledby="month">\n        <thead>\n            <tr id="weekdays" ng-if="showLabels" ng-bind-html="labels"></tr>\n        </thead>\n        <tbody>\n            <tr ng-repeat="(i, row) in rows">\n                <td ng-repeat="(j, el) in row" role="gridcell" aria-selected="{\'true\': el.selected, \'false\': !el.selected}" ng-class="{\'slds-is-today\': el.isToday && !el.selected, \'slds-is-selected\': el.selected}">\n                    <span class="slds-day" ng-class="{\'text-muted\': el.muted}" ng-bind="el.label" ng-click="$select(el.date)" ng-disabled="el.disabled"></span>\n                </td>\n            </tr>\n            <tr ng-if="$hasToday">\n                <td colspan="7" role="gridcell"><a href="javascript:void(0);" class="slds-show--inline-block slds-p-bottom--x-small" ng-click="$setToday()">Today</a></td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n'),$templateCache.put("SldsTabsScoped.tpl.html",'<div class="slds-tabs--scoped">\n    <ul class="slds-tabs--scoped__nav" role="tablist">\n        <!-- <li class="tabs-icon">\n            <span class="slds-icon_container" title="Log Actions Tabset">\n                <svg aria-hidden="true" class="slds-icon slds-icon--x-small slds-icon-text-default">\n                    <use xlink:href="{{\'/assets/icons/utility-sprite/svg/symbols.svg#tabset\' | sldsStaticResourceURL}}"></use>\n                </svg>\n                <span class="slds-assistive-text">Log Actions Tabset</span>\n            </span>\n        </li> -->\n        <li class="slds-tabs--scoped__item slds-text-heading--label" title="{{$pane.title}}" role="presentation" ng-repeat="$pane in $panes track by $index" ng-class="{\'slds-active\': $isActive($pane, $index)}">\n            <a class="slds-tabs--scoped__link" href="javascript:void(0);" role="tab" tabindex="$index" aria-selected="true" aria-controls="tab-scoped-{{$index}}" ng-bind-html="$pane.title" data-index="{{$index}}" ng-click="!$pane.disabled && $setActive($pane.name || $index); importedScope.showTabPanes()"></a>\n        </li>\n    </ul>\n    <div class="slds-tabs--scoped__content slds-show" role="tabpanel" aria-labelledby="tab-scoped-1__item" ng-transclude></div>\n</div>\n'),$templateCache.put("SldsTimepicker.tpl.html",'<div class="slds-dropdown slds-datepicker timepicker" style="min-width: 0px;width: auto">\n    <table height="100%">\n        <thead>\n            <tr class="text-center">\n                <th>\n                    <button tabindex="-1" type="button" class="slds-button slds-button--icon" ng-click="$arrowAction(-1, 0)">\n                        <svg aria-hidden="true" class="slds-button__icon">\n                            <use xlink:href="{!URLFOR($Resource.slds, \'/assets/icons/utility-sprite/svg/symbols.svg#chevronup\')}"></use>\n                        </svg>\n                        <span class="slds-assistive-text">Up</span>\n                    </button>\n                </th>\n                <th>&nbsp;</th>\n                <th>\n                    <button tabindex="-1" type="button" class="slds-button slds-button--icon" ng-click="$arrowAction(-1, 1)">\n                        <svg aria-hidden="true" class="slds-button__icon">\n                            <use xlink:href="{!URLFOR($Resource.slds, \'/assets/icons/utility-sprite/svg/symbols.svg#chevronup\')}"></use>\n                        </svg>\n                        <span class="slds-assistive-text">Up</span>\n                    </button>\n                </th>\n                <th>&nbsp;</th>\n                <th>\n                    <button ng-if="showSeconds" tabindex="-1" type="button" class="slds-button slds-button--icon" ng-click="$arrowAction(-1, 2)">\n                        <svg aria-hidden="true" class="slds-button__icon">\n                            <use xlink:href="{!URLFOR($Resource.slds, \'/assets/icons/utility-sprite/svg/symbols.svg#chevronup\')}"></use>\n                        </svg>\n                        <span class="slds-assistive-text">Up</span>\n                    </button>\n                </th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr ng-repeat="(i, row) in rows">\n                <td class="text-center" ng-class="{\'slds-is-selected\': row[0].selected}">\n                    <span class="slds-day" ng-class="{\'text-muted\': row[0].muted}" ng-bind="row[0].label" ng-click="$select(row[0].date, 0)" ng-disabled="row[0].disabled"></span>\n                </td>\n                <td><span ng-bind="i == midIndex ? timeSeparator : \' \'"></span></td>\n                <td class="text-center" ng-class="{\'slds-is-selected\': row[1].selected}">\n                    <span class="slds-day" ng-class="{\'text-muted\': row[1].muted}" ng-bind="row[1].label" ng-click="$select(row[1].date, 1)" ng-disabled="row[1].disabled"></span>\n                </td>\n                <td><span ng-bind="i == midIndex ? timeSeparator : \' \'"></span></td>\n                <td class="text-center" ng-class="{\'slds-is-selected\': row[2].selected}">\n                    <span class="slds-day" ng-class="{\'text-muted\': row[2].muted}" ng-bind="row[2].label" ng-click="$select(row[2].date, 2)" ng-disabled="row[2].disabled"></span>\n                </td>\n                <td ng-if="showAM">&nbsp;</td>\n                <td ng-if="showAM">\n                    <span class="slds-day" ng-show="i == midIndex - !isAM * 1" ng-click="$switchMeridian()" ng-disabled="el.disabled" ng-class="{\'slds-is-selected\': !!isAM}">AM</span>\n                    <span class="slds-day" ng-show="i == midIndex + 1 - !isAM * 1" ng-click="$switchMeridian()" ng-disabled="el.disabled" ng-class="{\'slds-is-selected\': !isAM}">PM</span>\n                </td>\n            </tr>\n        </tbody>\n        <tfoot>\n            <tr class="text-center">\n                <th>\n                    <button tabindex="-1" type="button" class="slds-button slds-button--icon" ng-click="$arrowAction(1, 0)">\n                        <svg aria-hidden="true" class="slds-button__icon">\n                            <use xlink:href="{!URLFOR($Resource.slds, \'/assets/icons/utility-sprite/svg/symbols.svg#chevrondown\')}"></use>\n                        </svg>\n                        <span class="slds-assistive-text">Down</span>\n                    </button>\n                </th>\n                <th>&nbsp;</th>\n                <th>\n                    <button tabindex="-1" type="button" class="slds-button slds-button--icon" ng-click="$arrowAction(1, 1)">\n                        <svg aria-hidden="true" class="slds-button__icon">\n                            <use xlink:href="{!URLFOR($Resource.slds, \'/assets/icons/utility-sprite/svg/symbols.svg#chevrondown\')}"></use>\n                        </svg>\n                        <span class="slds-assistive-text">Down</span>\n                    </button>\n                </th>\n                <th>&nbsp;</th>\n                <th>\n                    <button ng-if="showSeconds" tabindex="-1" type="button" class="slds-button slds-button--icon" ng-click="$arrowAction(1, 2)">\n                        <svg aria-hidden="true" class="slds-button__icon">\n                            <use xlink:href="{!URLFOR($Resource.slds, \'/assets/icons/utility-sprite/svg/symbols.svg#chevrondown\')}"></use>\n                        </svg>\n                        <span class="slds-assistive-text">Down</span>\n                    </button>\n                </th>\n            </tr>\n        </tfoot>\n    </table>\n</div>\n'),$templateCache.put("SldsTooltip.tpl.html",'<div class="slds-popover slds-popover--tooltip slds-nubbin--bottom{{status.position}}" role="tooltip" ng-show="title">\n    <div class="slds-popover__body" ng-bind="title"></div>\n</div>\n'),$templateCache.put("dir-pagination-controls.tpl.html",'<ul class="pagination" ng-if="1 < pages.length">\n    <li ng-if="boundaryLinks" ng-class="{ disabled : pagination.current == 1 }">\n        <a href="" ng-click="setCurrent(1)">&laquo;</a>\n    </li>\n    <li ng-if="directionLinks" ng-class="{ disabled : pagination.current == 1 }">\n        <a href="" ng-click="setCurrent(pagination.current - 1)">&lsaquo;</a>\n    </li>\n    <li ng-repeat="pageNumber in pages track by $index" ng-class="{ active : pagination.current == pageNumber, disabled : pageNumber == \'...\' }">\n        <a href="" ng-click="setCurrent(pageNumber)">{{ pageNumber }}</a>\n    </li>\n\n    <li ng-if="directionLinks" ng-class="{ disabled : pagination.current == pagination.last }">\n        <a href="" ng-click="setCurrent(pagination.current + 1)">&rsaquo;</a>\n    </li>\n    <li ng-if="boundaryLinks"  ng-class="{ disabled : pagination.current == pagination.last }">\n        <a href="" ng-click="setCurrent(pagination.last)">&raquo;</a>\n    </li>\n</ul>\n\n\n'),$templateCache.put("member-email.tpl.html",'<div class="slds-modal slds-fade-in-open lds-modal--large">\n    <div class="slds-modal__container">\n        <div class="slds-modal__header">\n            <h2 class="slds-text-heading--medium">Send Email</h2>\n        </div>\n        <div class="slds-modal__content">\n            <div class="slds-form--horizontal slds-m-around--x-large" id="email-container" >\n                <div class="slds-form-element">\n                    <label class="slds-form-element__label slds-float--left"><abbr class="slds-required" title="member-email-subject">*</abbr>Subject:</label>\n                    <div class="slds-form-element__control">\n                      <input id="member-email-subject" class="slds-input" type="text" placeholder="Enter Subject" ng-model="emailModel.subject"/>\n                    </div>\n                </div>\n                <div class="slds-form-element" ng-class="{\'slds-has-error\' : messageError}">\n                    <label class="slds-form-element__label"><abbr class="slds-required" title="member-email-message">*</abbr>Message:</label>\n                    <div class="slds-form-element__control">\n                      <textarea id="member-email-message" class="slds-textarea" ng-model="emailModel.message" placeholder="Enter message"></textarea>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class="slds-modal__footer">\n            <button type="button" class="slds-button slds-button--neutral" ng-click="$hide()">Cancel</button>\n            <button type="button" class="slds-button slds-button--brand"  ng-click="sendEmail(emailModel.subject, emailModel.message); $hide()" ng-disabled="!emailModel.subject || !emailModel.message">Send</button>\n        </div>\n    </div>\n</div>\n'),$templateCache.put("member-tabs-form.tpl.html",'<div class="slds-form--stacked slds-clearfix member-tabs-{{tab.tabUI.className}}">\n    <div class="slds-form-element" ng-repeat="field in tab.fields.storyObject.fieldList">\n        <label ng-if="tab.fields.storyObject.fieldNameTypeMap[field] !== \'BOOLEAN\'" class="slds-form-element__label" for="{{tab.tabUI.className}}-{{field.toLowerCase()}}">{{tab.fields.storyObject.fieldNameLabelMap[field]}}</label>\n        <div class="slds-form-element__control">\n            <input ng-if="tab.fields.storyObject.fieldNameTypeMap[field] === \'STRING\' || tab.fields.storyObject.fieldNameTypeMap[field] === \'COMBOBOX\'" id="{{tab.tabUI.className}}-{{field.toLowerCase()}}" ng-model="tab.fields.storyObject.fieldValueMap[field]" class="slds-input" type="text" />\n            <!-- <input ng-if="tab.fields.storyObject.fieldNameTypeMap[field] === \'STRING\' || tab.fields.storyObject.fieldNameTypeMap[field] === \'COMBOBOX\' || tab.fields.storyObject.fieldNameTypeMap[field].indexOf(\'DATE\') > -1" id="{{tab.tabUI.className}}-{{field.toLowerCase()}}" ng-model="tab.fields.storyObject.fieldValueMap[field]" class="slds-input" type="text" /> -->\n            <input ng-if="tab.fields.storyObject.fieldNameTypeMap[field] === \'INTEGER\'" id="{{tab.tabUI.className}}-{{field.toLowerCase()}}" ng-model="tab.fields.storyObject.fieldValueMap[field]" class="slds-input" type="number" />\n            <div class="slds-grid slds-clearfix" ng-if="tab.fields.storyObject.fieldNameTypeMap[field] === \'DATETIME\'">\n                <input id="{{tab.tabUI.className}}-{{field.toLowerCase()}}" ng-model="tab.fields.storyObject.fieldValueMap[field]" class="slds-input slds-float--left slds-size--1-of-2 slds-m-right--small" type="text" bs-datepicker="true" />\n                <input id="{{tab.tabUI.className}}-{{field.toLowerCase()}}--timepicker" ng-model="tab.fields.storyObject.fieldValueMap[field]" class="slds-input slds-float--left slds-size--1-of-2 slds-m-left--small" type="text" bs-timepicker="true" />\n            </div>\n            <input ng-if="tab.fields.storyObject.fieldNameTypeMap[field] === \'DATE\'" id="{{tab.tabUI.className}}-{{field.toLowerCase()}}" ng-model="tab.fields.storyObject.fieldValueMap[field]" class="slds-input" type="text" bs-datepicker="true" />\n            <div ng-if="tab.fields.storyObject.fieldNameTypeMap[field] === \'PICKLIST\'" class="slds-select_container">\n                <select id="{{tab.tabUI.className}}-{{field.toLowerCase()}}" ng-model="tab.fields.storyObject.fieldValueMap[field]" class="slds-select" ng-options="picklist for picklist in tab.fields.storyObject.fieldPickValues[field]"></select>\n            </div>\n            <label ng-if="tab.fields.storyObject.fieldNameTypeMap[field] === \'BOOLEAN\'" class="slds-checkbox slds-m-top--medium">\n                <input type="checkbox" name="options" id="new-note-private" ng-model="tab.fields.storyObject.fieldValueMap[field]" />\n                <span class="slds-checkbox--faux"></span>\n                <span class="slds-form-element__label">{{tab.fields.storyObject.fieldNameLabelMap[field]}}</span>\n            </label>\n            <textarea ng-if="tab.fields.storyObject.fieldNameTypeMap[field] === \'TEXTAREA\'" id="{{tab.tabUI.className}}-{{field.toLowerCase()}}" ng-model="tab.fields.storyObject.fieldValueMap[field]" class="slds-textarea"></textarea>\n        </div>\n    </div>\n    <button class="slds-button slds-button--brand slds-float--right slds-m-top--medium" ng-click="importedScope.createNewStory(tab)">Save</button>\n    <button class="slds-button slds-button--neutral slds-float--right slds-m-top--medium slds-m-right--medium" ng-click="importedScope.hideTabPanes()">Cancel</button>\n</div>\n'),$templateCache.put("member-tabs-log-call.tpl.html",'<div class="slds-form--stacked slds-clearfix member-tabs-log-call">\n    <div class="slds-form-element">\n        <label class="slds-form-element__label" for="log-event-subject">Subject</label>\n        <div class="slds-form-element__control">\n          <input id="log-event-subject" ng-model="dummy.data" class="slds-input" type="text" />\n        </div>\n    </div>\n    <div class="slds-form-element">\n        <label class="slds-form-element__label" for="log-event-name">Name</label>\n        <div class="slds-form-element__control">\n          <input id="log-event-name" ng-model="dummy.data" class="slds-input" type="text" />\n        </div>\n    </div>\n    <div class="slds-form-element">\n        <label class="slds-form-element__label" for="log-event-comments">Comments</label>\n        <div class="slds-form-element__control">\n            <textarea id="log-event-comments" ng-model="dummy.data" class="slds-textarea"></textarea>\n        </div>\n    </div>\n    <button class="slds-button slds-button--brand slds-float--right">Save</button>\n</div>\n'),$templateCache.put("member-tabs-new-event.tpl.html",'<div class="slds-form--stacked slds-clearfix member-tabs-log-event">\n    <div class="slds-form-element">\n        <label class="slds-form-element__label" for="log-event-subject">Subject</label>\n        <div class="slds-form-element__control">\n          <input id="log-event-subject" ng-model="dummy.data" class="slds-input" type="text" />\n        </div>\n    </div>\n    <div class="slds-form-element">\n        <label class="slds-form-element__label" for="log-event-comments">Comments</label>\n        <div class="slds-form-element__control">\n            <textarea id="log-event-comments" ng-model="dummy.data" class="slds-textarea"></textarea>\n        </div>\n    </div>\n    <button class="slds-button slds-button--brand slds-float--right">Save</button>\n</div>\n'),$templateCache.put("member-tabs-new-note.tpl.html",'<div class="slds-form--stacked slds-clearfix member-tabs-new-note">\n    <div class="slds-form-element">\n        <label class="slds-form-element__label" for="new-note-subject">Subject</label>\n        <div class="slds-form-element__control">\n          <input id="new-note-subject" ng-model="dummy.data" class="slds-input" type="text" />\n        </div>\n    </div>\n    <div class="slds-form-element">\n        <label class="slds-form-element__label" for="new-note-comments">Comments</label>\n        <div class="slds-form-element__control">\n            <textarea id="new-note-comments" ng-model="dummy.data" class="slds-textarea"></textarea>\n        </div>\n    </div>\n    <div class="slds-form-element">\n        <div class="slds-form-element__control">\n            <label class="slds-checkbox">\n                <input type="checkbox" name="options" id="new-note-private" ng-model="dummy.data" />\n                <span class="slds-checkbox--faux"></span>\n                <span class="slds-form-element__label">Private</span>\n            </label>\n        </div>\n    </div>\n    <button class="slds-button slds-button--brand slds-float--right">Save</button>\n</div>\n'),$templateCache.put("member-tabs-new-opportunity.tpl.html",'<div class="slds-grid slds-wrap slds-m-bottom--small">\n    <div class="slds-form-element slds-col slds-p-right--medium slds-size--1-of-2">\n        <label class="slds-form-element__label" for="new-opportunity-type">Type</label>\n        <div class="slds-form-element__control slds-float--left slds-size--1-of-1">\n            <div class="slds-select_container">\n                <select id="new-opportunity-type" ng-model="dummy.data" class="slds-select">\n                    <option>Option One</option>\n                    <option>Option Two</option>\n                    <option>Option Three</option>\n                </select>\n            </div>\n        </div>\n    </div>\n    <div class="slds-form-element slds-col slds-size--1-of-2">\n        <label class="slds-form-element__label" for="new-opportunity-close-date">Close Date</label>\n        <div class="slds-form-element__control">\n            <input id="new-opportunity-close-date" ng-model="dummy.data" class="slds-input" type="text" />\n        </div>\n    </div>\n</div>\n<div class="slds-form--stacked slds-clearfix member-tabs-new-note">\n    <div class="slds-form-element">\n        <label class="slds-form-element__label" for="new-opportunity-name">Subject</label>\n        <div class="slds-form-element__control">\n          <input id="new-opportunity-name" ng-model="dummy.data" class="slds-input" type="text" />\n        </div>\n    </div>\n    <div class="slds-form-element">\n        <label class="slds-form-element__label" for="new-opportunity-description">Description</label>\n        <div class="slds-form-element__control">\n            <textarea id="new-opportunity-description" ng-model="dummy.data" class="slds-textarea"></textarea>\n        </div>\n    </div>\n    <div class="slds-form-element">\n        <label class="slds-form-element__label" for="new-opportunity-next-step">Next Step</label>\n        <div class="slds-form-element__control">\n          <input id="new-opportunity-next-step" ng-model="dummy.data" class="slds-input" type="text" />\n        </div>\n    </div>\n    <div class="slds-form-element">\n        <label class="slds-form-element__label" for="new-opportunity-stage">Stage</label>\n        <div class="slds-form-element__control slds-float--left slds-size--1-of-1">\n            <div class="slds-select_container">\n                <select id="new-opportunity-stage" ng-model="dummy.data" class="slds-select">\n                    <option>Option One</option>\n                    <option>Option Two</option>\n                    <option>Option Three</option>\n                </select>\n            </div>\n        </div>\n    </div>\n</div>\n<div class="slds-grid slds-wrap slds-m-top--small">\n    <div class="slds-form-element slds-col slds-p-right--medium slds-size--1-of-2">\n        <label class="slds-form-element__label" for="new-opportunity-close-amount">Amount</label>\n        <div class="slds-form-element__control">\n            <input id="new-opportunity-close-amount" ng-model="dummy.data" class="slds-input" type="text" />\n        </div>\n    </div>\n    <div class="slds-form-element slds-col slds-size--1-of-2 slds-m-top--none">\n        <label class="slds-form-element__label" for="new-opportunity-close-probability">Probability</label>\n        <div class="slds-form-element__control">\n            <input id="new-opportunity-close-probability" ng-model="dummy.data" class="slds-input" type="text" />\n        </div>\n    </div>\n</div>\n<button class="slds-button slds-button--brand slds-float--right slds-m-top--medium">Save</button>'),$templateCache.put("member-tabs-new-task.tpl.html",'<div class="slds-form--stacked slds-clearfix member-tabs-{{tab.tabUI.className}}">\n    <div class="slds-form-element" ng-repeat="field in tab.fields.storyObject.fieldList">\n        <label class="slds-form-element__label" for="{{tab.tabUI.className}}-{{field.toLowerCase()}}">{{tab.fields.storyObject.fieldNameLabelMap[field]}}</label>\n        <div class="slds-form-element__control">\n            <input ng-if="tab.fields.storyObject.fieldNameTypeMap[field] === \'TEXT\' || tab.fields.storyObject.fieldNameTypeMap[field] === \'COMBOBOX\' || tab.fields.storyObject.fieldNameTypeMap[field] === \'DATE\'" id="{{tab.tabUI.className}}-{{field.toLowerCase()}}" ng-model="dummy.data" class="slds-input" type="text" />\n            <div ng-if="tab.fields.storyObject.fieldNameTypeMap[field] === \'PICKLIST\'" class="slds-select_container">\n                <select id="{{tab.tabUI.className}}-{{field.toLowerCase()}}" ng-model="dummy.data" class="slds-select" ng-options="picklist for picklist in tab.fields.storyObject.fieldPickValues[field]"></select>\n            </div>\n            <textarea ng-if="tab.fields.storyObject.fieldNameTypeMap[field] === \'TEXTAREA\'" id="{{tab.tabUI.className}}-{{field.toLowerCase()}}" ng-model="dummy.data" class="slds-textarea"></textarea>\n        </div>\n    </div>\n    <button class="slds-button slds-button--brand slds-float--right">Save</button>\n</div>\n')}]);
},{}]},{},[1]);

})();